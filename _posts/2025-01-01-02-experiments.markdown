---
layout: post
title: "Experiments"
category: ""
---

# Experiments

LLM（大規模言語モデル）を用いた改善ループ、モデルサイズによる実行時間、RAG（Retrieval-Augmented Generation）の限界についての実験記録。

---

## 1. 自動改善ループ実験

### 概要

プログラムを自動生成し、それを実行 → エラーや改善提案をプロンプトとして再入力 → 再生成 …という改善ループを試みた。

### 結果

- 同じ出力が繰り返され、改善が収束する現象が確認された。
- 同じプロンプトに対して、同じ出力が返るようになり、ループの効果が頭打ちに。
- 使用したモデルが小さく、モデルサイズが影響している可能性がある。

> より大規模なモデルを使用することで、ループ改善能力が向上する可能性あり。

---

## 2. モデルサイズと応答時間

### 実験目的

モデルのサイズと応答時間の関係を観察。

### 実行環境

- **CPU**: Intel(R) Core(TM) i5-8250U @ 1.60GHz（CPUのみ）
- **メモリ**: 7.7GB（Swap: 40GB）

### 使用プロンプト

```text
hello
````

### モデル別応答時間（`gemma3`）

| モデル        | サイズ  | 実行時間               |
| ---------- | ---- | ------------------ |
| gemma3:1b  | 小    | 約 3 秒 (`0:03.31`)  |
| gemma3:4b  | 中    | 約 14 秒 (`0:14.02`) |
| gemma3:12b | 大    | 約 5 分半 (`5:37.88`) |
| gemma3:27b | 非常に大 | 約 1時間半 (`1:33:13`) |

> 大きなモデルは推論に大幅な時間がかかる。実験には時間リソースと十分な計算資源が必要。

---

## 3. RAGを用いたスクリプト理解の限界

### 試行内容

RAGを用いて、Rubyのドキュメントをベースに、スクリプトの内容を理解・説明させる実験。

### 問題点と観察

* サンプルスクリプトが断片的で、ベクトル検索で十分な類似度が得られなかった。
* そのため、意図したドキュメントが検索フェーズでヒットせず、誤った説明が生成される場合がある。
